# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

name: central-release
on:
  push:
    branches:
      - rel
  workflow_dispatch: {}
jobs:
  bump_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    outputs:
      version: ${{ steps.getver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set Git Identity
        run: |-
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
      - name: Run Projen Release (ajithapackage1)
        run: npx projen release
        working-directory: src/packages/ajithapackage1
      - name: Read Version
        id: getver
        run: |-
          VERSION=$(cat src/packages/ajithapackage1/dist/releasetag.txt | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
  release_ajithapackage:
    needs: bump_version
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/release_package.yml
    with:
      version: ${{ needs.bump_version.outputs.version }}
      package_name: ajithapackage
      package_path: src/packages/ajithapackage1
    secrets: inherit
  release_ajithapackage2:
    needs: bump_version
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/release_package.yml
    with:
      version: ${{ needs.bump_version.outputs.version }}
      package_name: ajithapackage2
      package_path: src/packages/ajithapackage2
    secrets: inherit
  release_smithy_client:
    needs: bump_version
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/release_package.yml
    with:
      version: ${{ needs.bump_version.outputs.version }}
      package_name: smithy-client
      package_path: src/packages/my-api/build/smithy/source/typescript-client-codegen
    secrets: inherit
  release_smithy_ssdk:
    needs: bump_version
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/release_package.yml
    with:
      version: ${{ needs.bump_version.outputs.version }}
      package_name: smithy-ssdk
      package_path: src/packages/my-api/build/smithy/source/typescript-ssdk-codegen
    secrets: inherit
  npm_release:
    needs:
      - release_ajithapackage
      - release_ajithapackage2
      - release_smithy_client
      - release_smithy_ssdk
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      CI: "true"
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          registry-url: https://registry.npmjs.org
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Publish packages to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.TOKEN }}
          NPM_DIST_TAG: latest
        run: |-
          # List directory contents for debugging
          ls -la

          packages=(ajithapackage ajithapackage2 smithy-client smithy-ssdk)

          # Verify package structure
          for pkg in "${packages[@]}"; do
            echo "Checking $pkg..."
            [ -d "$pkg" ] || { echo "Error: Directory $pkg not found"; exit 1; }
            [ -f "$pkg/package.json" ] || { echo "Error: $pkg/package.json not found"; exit 1; }
            jq . "$pkg/package.json" > /dev/null || { echo "Error: Invalid package.json in $pkg"; exit 1; }
          done

          # Publish packages
          for pkg in "${packages[@]}"; do
            echo "Publishing $pkg"
            cd "$pkg" && npm publish --access public && cd .. || exit 1
          done
      - name: Finalize Release
        run: |-
          echo "All child workflows have completed successfully."
          echo "All packages are published to NPM"
  github_release:
    needs:
      - npm_release
      - bump_version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "v${{ needs.bump_version.outputs.version }}" --title "v${{ needs.bump_version.outputs.version }}" --notes "Automated release for all packages" *.tgz
  cleanup_failed_tag:
    needs: bump_version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    if: failure() && needs.bump_version.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Delete Git Tag
        run: |-
          TAG=$(cat src/packages/ajithapackage1/dist/releasetag.txt)
          echo "Deleting tag: $TAG"
          git tag -d "$TAG" || true
          git push origin ":refs/tags/$TAG" || true
concurrency:
  group: release
  cancel-in-progress: false
